package render

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
)

// RenderTemplates renders templates using html/template

func RenderTemplatesTest(w http.ResponseWriter, tmpl string) {
	// parsedTemplate, _ := template.ParseFiles("./templates/" + tmpl, "./templates/base.layout.tmpl")
	parsedTemplate, _ := template.ParseFiles("./templates/" + tmpl, "./templates/base.html")
	err := parsedTemplate.Execute(w, "./templates/base.html")
	if err != nil {
		fmt.Println("error parsing template:", err)
	}
}

var tc = make(map[string]*template.Template)

func RenderTemplates(w http.ResponseWriter, t string)  {
	var tmpl *template.Template
	var err error
	// check to see if the template cache exists
	_, inMap := tc[t]
	if !inMap {
		// need to create the template
		log.Println("Creating template and adding to cache")
		err = createTemplateCache(t)
		if err != nil {
			log.Println("error creating template cache:", err)
		}
	} else {
		// we have a template in change
		log.Println("Using cached template")
	}
	tmpl = tc[t]
	err = tmpl.Execute(w, nil)
	if err != nil {
		log.Println("error parsing template:", err)
	}

}

func createTemplateCache(t string) error{
	templates := []string{
		fmt.Sprintf("./templates/" + t),
		"./templates/base.html",
	}
	// parse the template file
	tmpl, err := template.ParseFiles(templates...)
	if err != nil {
		return err
	}
	// add template to cache
	tc[t] = tmpl
	return nil
}